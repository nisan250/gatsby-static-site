{"version":3,"sources":["webpack:///./src/components/article.js","webpack:///./src/components/article-list.js","webpack:///./src/pages/index.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/footer.js","webpack:///./src/components/header.js","webpack:///./src/components/layout.js","webpack:///./src/components/seo.js"],"names":["article","props","react_default","a","createElement","gatsby_browser_entry","to","className","styles","articleBox","key","id","left","src","keywords","alt","title","right","date","excerpt","article_list","query","render","data","allMarkdownRemark","edges","map","_ref","node","fields","slug","frontmatter","_3773590108","IndexPage","layout","seo","__webpack_require__","d","__webpack_exports__","StaticQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","gatsby_link__WEBPACK_IMPORTED_MODULE_2__","gatsby_link__WEBPACK_IMPORTED_MODULE_2___default","StaticQueryContext","React","createContext","Consumer","staticQueryData","children","propTypes","PropTypes","object","string","isRequired","func","m","module","exports","require","default","ProdPageRenderer","location","pageResources","loader","getResourcesForPathnameSync","pathname","InternalPageRenderer","Object","assign","json","shape","Footer","mainFooter","mainSize","Date","getFullYear","href","HeaderLink","link","text","Header","siteTitle","mainHeader","mainTitle","nav","header_HeaderLink","defaultProps","Layout","Fragment","header","site","siteMetadata","container","footer","_755544856","SEO","description","lang","meta","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","metaDescription","react__WEBPACK_IMPORTED_MODULE_1___default","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","htmlAttributes","titleTemplate","name","content","property","author","concat","length","join","array","arrayOf"],"mappings":"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","file":"component---src-pages-index-js-2471ba4d3adc81352a65.js","sourcesContent":["import React from 'react'\nimport {Link} from 'gatsby'\nimport styles from  './article.module.scss'\n\nexport default (props) => (\n\n   <Link to={props.to}>\n      <article className={styles.articleBox} key={props.id}>\n         <div className={styles.left}>\n            <img src={'https://source.unsplash.com/150x150/?' + props.keywords} alt={props.title} />\n         </div>\n         <div className={styles.right}>\n            <h3>\n               {props.title}\n            </h3>\n            <div className={styles.date}>{props.date}\n            </div>\n            <div>\n               {props.excerpt}\n            </div>\n         </div>\n      </article>\n   </Link>\n \n)\n\n","import React from 'react';\nimport { StaticQuery, graphql } from 'gatsby'\nimport Article from '../components/article'\n\nexport default () => (\n   <StaticQuery\n \n      query = { graphql `query {\n         allMarkdownRemark(sort: {fields: [frontmatter___date], order: DESC}) {\n           totalCount\n           edges {\n             node {\n               id\n               frontmatter {\n                 title\n                 image\n                 keywords\n                 date(formatString: \"MMMM YYYY\")\n               }\n               fields {\n                  slug\n               }\n               excerpt\n             }\n           }\n         }\n       }`\n\n      }\n\n      render = { data => (\n         <div>\n            {data.allMarkdownRemark.edges.map(({ node }) => (\n               <Article id={node.id}\n                  to={node.fields.slug}\n                  keywords={node.frontmatter.keywords}\n                  title={node.frontmatter.title}\n                  date={node.frontmatter.date}\n                  excerpt={node.excerpt} />\n            ))}\n         </div>\n      )}\n\n   />\n)","import React from \"react\"\r\n// import { Link } from \"gatsby\"\r\n// import styles from \"./index.module.scss\";\r\nimport Layout from \"../components/layout\"\r\n// import Image from \"../components/image\"\r\nimport SEO from \"../components/seo\"\r\nimport ArticleList from '../components/article-list'\r\n\r\nconst IndexPage = () => (\r\n  <Layout>\r\n    <SEO title=\"Home\" keywords={[`gatsby`, `application`, `react`]} />\r\n    {/* <h1 className={styles.test}>Spaghetti Western</h1> */}\r\n    <p>Welcome to your new Gatsby site.</p>\r\n    {/* <div style={{ maxWidth: `300px`, marginBottom: `1.45rem` }}>\r\n      <Image />\r\n    </div> */}\r\n    <ArticleList />\r\n\r\n  </Layout>\r\n)\r\n\r\nexport default IndexPage\r\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away,. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n.` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathnameSync(location.pathname)\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","// import { Link } from \"gatsby\"\r\n// import PropTypes from \"prop-types\"\r\nimport React from \"react\"\r\nimport styles from \"./footer.module.scss\"\r\n\r\nconst Footer = () => (\r\n  <footer className={styles.mainFooter}>\r\n    <div className={styles.mainSize}>\r\n      © {new Date().getFullYear()}, Built with\r\n      {` `}\r\n      <a href=\"https://www.gatsbyjs.org\">Gatsby</a>\r\n    </div>\r\n\r\n  </footer>\r\n)\r\n\r\nexport default Footer\r\n","import { Link } from \"gatsby\"\r\nimport PropTypes from \"prop-types\"\r\nimport React from \"react\"\r\nimport styles from \"./header.module.scss\"\r\n\r\n// HeaderLink component\r\nconst HeaderLink = props => (\r\n  <Link className={styles.link} to={props.to}>{props.text}</Link>\r\n)\r\n\r\n// HomeButton component\r\n// const HomeButton = props => (\r\n//   <Link to={props.to}>\r\n//     <div className={styles.button}>{props.text}</div>\r\n//   </Link>\r\n// )\r\n\r\nconst Header = ({ siteTitle }) => (\r\n  <header className={styles.mainHeader}>\r\n    <div className={styles.mainSize}>\r\n      <h1 className={styles.mainTitle}>\r\n        <Link to=\"/\">\r\n          {siteTitle}\r\n        </Link>\r\n      </h1>\r\n      <nav className={styles.nav}>\r\n          <HeaderLink to=\"/\" text='Home' />\r\n          <HeaderLink to=\"/about/\" text='About' />\r\n      </nav>\r\n    </div>\r\n  </header>\r\n)\r\n\r\nHeader.propTypes = {\r\n  siteTitle: PropTypes.string,\r\n}\r\n\r\nHeader.defaultProps = {\r\n  siteTitle: ``,\r\n}\r\n\r\nexport default Header\r\n","/**\r\n * Layout component that queries for data\r\n * with Gatsby's StaticQuery component\r\n *\r\n * See: https://www.gatsbyjs.org/docs/static-query/\r\n */\r\n\r\nimport React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { StaticQuery, graphql } from \"gatsby\"\r\n\r\nimport Footer from \"./footer\"\r\nimport Header from \"./header\"\r\nimport styles from \"./layout.module.scss\";\r\n\r\nconst Layout = ({ children }) => (\r\n  <StaticQuery\r\n    query={graphql`\r\n      query SiteTitleQuery {\r\n        site {\r\n          siteMetadata {\r\n            title\r\n          }\r\n        }\r\n      }\r\n    `}\r\n    render={data => (\r\n      <>\r\n        <Header siteTitle={data.site.siteMetadata.title} />\r\n        <div className={styles.container}>\r\n          <div className={styles.mainSize}>\r\n            <main>{children}</main>\r\n          </div>\r\n        </div>\r\n        <Footer />\r\n      </>\r\n    )}\r\n  />\r\n)\r\n\r\nLayout.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n}\r\n\r\nexport default Layout\r\n","/**\r\n * SEO component that queries for data with\r\n *  Gatsby's useStaticQuery React hook\r\n *\r\n * See: https://www.gatsbyjs.org/docs/use-static-query/\r\n */\r\n\r\nimport React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport Helmet from \"react-helmet\"\r\nimport { useStaticQuery, graphql } from \"gatsby\"\r\n\r\nfunction SEO({ description, lang, meta, keywords, title }) {\r\n  const { site } = useStaticQuery(\r\n    graphql`\r\n      query {\r\n        site {\r\n          siteMetadata {\r\n            title\r\n            description\r\n            author\r\n          }\r\n        }\r\n      }\r\n    `\r\n  )\r\n\r\n  const metaDescription = description || site.siteMetadata.description\r\n\r\n  return (\r\n    <Helmet\r\n      htmlAttributes={{\r\n        lang,\r\n      }}\r\n      title={title}\r\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\r\n      meta={[\r\n        {\r\n          name: `description`,\r\n          content: metaDescription,\r\n        },\r\n        {\r\n          property: `og:title`,\r\n          content: title,\r\n        },\r\n        {\r\n          property: `og:description`,\r\n          content: metaDescription,\r\n        },\r\n        {\r\n          property: `og:type`,\r\n          content: `website`,\r\n        },\r\n        {\r\n          name: `twitter:card`,\r\n          content: `summary`,\r\n        },\r\n        {\r\n          name: `twitter:creator`,\r\n          content: site.siteMetadata.author,\r\n        },\r\n        {\r\n          name: `twitter:title`,\r\n          content: title,\r\n        },\r\n        {\r\n          name: `twitter:description`,\r\n          content: metaDescription,\r\n        },\r\n      ]\r\n        .concat(\r\n          keywords.length > 0\r\n            ? {\r\n                name: `keywords`,\r\n                content: keywords.join(`, `),\r\n              }\r\n            : []\r\n        )\r\n        .concat(meta)}\r\n    />\r\n  )\r\n}\r\n\r\nSEO.defaultProps = {\r\n  lang: `en`,\r\n  meta: [],\r\n  keywords: [],\r\n}\r\n\r\nSEO.propTypes = {\r\n  description: PropTypes.string,\r\n  lang: PropTypes.string,\r\n  meta: PropTypes.array,\r\n  keywords: PropTypes.arrayOf(PropTypes.string),\r\n  title: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default SEO\r\n"],"sourceRoot":""}